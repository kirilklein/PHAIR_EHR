logging:
  level: INFO
  path: ./outputs/logs

paths:
## INPUTS
  features: ./outputs/causal/features
  tokenized: ./outputs/causal/tokenized
  cohort: ./outputs/causal/exposure_cohort # path to cohort directory
  # test_pids: pids_path # path to file with pids to use for test set

  # tokenized_file: "features_finetune.pt" # can also be a list
  # tokenized_pids: "pids_finetune.pt" # can also be a list
 
  pretrain_model: ./outputs/causal/pretraining
 
  # restart_model: ... # Use for restarting from checkpoint
  
  outcome: ./outputs/causal/outcomes/EXPOSURE.csv
  
  prepared_data: ./outputs/causal/finetuning/processed_data/exposure

## OUTPUTS
  model: ./outputs/causal/finetuning_exposure # Save model/outputs to this folder
  #runs: ./outputs/pretraining # Use for generating a new model folder
  
model:
  cls:
    _target_: ehr2vec.model.heads.ClassifierGRU
    bidirectional: true

data:
  predefined_folds: true # using predefined folds, ignore cv_folds if true
  truncation_len: 256
  save_processed: true
  test_split: 0
  min_len: 0

outcome: # we will convert outcomes to binary based on whether at least one outcome is in the follow up window
  n_hours_censoring: -10 # censor time after index date (negative means before)
  n_hours_start_follow_up: -1 # start follow up (considering outcomes) time after index date (negative means before)
  n_hours_end_follow_up: null # end follow up (considering outcomes) time after index date (negative means before)
  
trainer_args:
  sampler: true
  sample_weight_function:
    _target_: corebehrt.evaluation.utils.inverse_sqrt # function to calculate sample weights
  batch_size: 256
  val_batch_size: 256
  effective_batch_size: 256
  epochs: 5
  info: true
  gradient_clip: 
    clip_value: 1.0
  shuffle: true
  checkpoint_frequency: 1
  early_stopping: 20
  stopping_criterion: roc_auc
  
optimizer:
  lr: 5e-4
  eps: 1e-6

scheduler:
  _target_: transformers.get_constant_schedule_with_warmup
  num_warmup_epochs: 1  

metrics:
  roc_auc:
    _target_: corebehrt.modules.monitoring.metrics.ROC_AUC
  pr_auc:
    _target_: corebehrt.modules.monitoring.metrics.PR_AUC
  

 
